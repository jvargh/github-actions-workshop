name: 02-actions-ci-cd-aks-tf

on:
  push:
    branches: [ main ]
    paths: .github/workflows/02-actions-ci-cd-aks-tf.yml
  pull_request:
    branches:  none # [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  STORAGE_ACCOUNT_NAME: jvstoragetfstate024
  RESOURCE_GROUP_NAME: rg-terraform-state
  CONTAINER_NAME: tfstate
  BLOB_NAME: terraform.tfstate

jobs:

  build-deploy-aks:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPOSITORY: jvargh
      IMAGE_NAME: web-app
      # IMAGE_TAG: ${{ github.run_number }} # ${{ github.sha }}
      IMAGE_TAG: 5
      AKS_RESOURCE_GROUP: aks-k8s-2024
      AKS_NAME: aks-k8s-2024
      ACR_NAME: acrforaks2024
      TERRAFORM_VERSION: 1.6.6
      WORKING_DIRECTORY: aks_infra
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}
        
    steps:

    - uses: actions/checkout@v2
  
    # - name: Build Docker Image
    #   working-directory: .
    #   run:
    #     docker build ./aks_MvcApp/ --file ./aks_MvcApp/Dockerfile --tag $DOCKER_REPOSITORY/$IMAGE_NAME:$GITHUB_RUN_NUMBER --build-arg=token=ZGEzNTQ5Y2QyNjAx --no-cache
  
    # - name: Run Trivy vulnerability scanner
    #   uses: aquasecurity/trivy-action@master
    #   continue-on-error: true
    #   with:
    #     image-ref: 'docker.io/${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}'
    #     format: 'table'
    #     exit-code: '1'
    #     ignore-unfixed: true
    #     vuln-type: 'os,library'
    #     severity: 'MEDIUM,HIGH,CRITICAL'
  
    - name: Login to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_REPOSITORY_PASSWORD }}" | docker login -u $DOCKER_REPOSITORY --password-stdin
        
    # - name: Push Image to Docker Hub
    #   run:
    #     docker push $DOCKER_REPOSITORY/$IMAGE_NAME:$GITHUB_RUN_NUMBER

    - name: Replace tokens in terraform.tfvars
      uses: cschleiden/replace-tokens@v1.0
      with:
        tokenPrefix: __
        tokenSuffix: __
        files: aks_infra/terraform.tfvars
      env:
        AKS_RESOURCE_GROUP: ${{ env.AKS_RESOURCE_GROUP }}
        AKS_NAME: ${{ env.AKS_NAME }}
        ACR_NAME: ${{ env.ACR_NAME }}
        SQL_INSTANCE_NAME: sqlforaks-tf-024
        DB_ADMIN_LOGIN: sadmin
        DB_ADMIN_PASSWORD: "@Aa123456"
        STORAGE_NAME: storageforsql024
    
    # COMMENTED below - have storage for tf state file, seen after this block
    # - name: Replace azurerm with local in backend.tf
    #   uses: jacobtomlinson/gha-find-replace@v2
    #   with:
    #     find: "azurerm"
    #     replace: "local"
    #     include: "aks_infra/backend.tf"
    #     regex: true

    - name: Login to Azure with Service Principal
      uses: Azure/login@v1.4.3
      with:
        # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Terraform backend state storage
      uses: Azure/cli@v1.0.6
      with:
        # Azure CLI version to be used to execute the script. If not provided, latest version is used
        # azcliversion: 2.34.1 # optional, default is agentazcliversion
        inlineScript: |
          az version

          # Create resource group
          az group create --name $RESOURCE_GROUP_NAME --location eastus
          
          # Create storage account
          az storage account create --name $STORAGE_ACCOUNT_NAME \
              --resource-group $RESOURCE_GROUP_NAME \
              --sku Standard_LRS \
              --encryption-services blob
          
          # Create blob container
          az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME
          
          # generate backend.tf file
          cd $WORKING_DIRECTORY
          cat <<EOT > backend.tf
          terraform {
            backend "azurerm" {
              resource_group_name   = "$RESOURCE_GROUP_NAME"
              storage_account_name  = "$STORAGE_ACCOUNT_NAME"
              container_name        = "$CONTAINER_NAME"
              key                   = "$BLOB_NAME"
            }
          }
          EOT
          
          cat backend.tf

    # Install the latest version of Terraform CLI
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Terraform Init
      id: init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run:
        terraform init
  
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: format
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: |
        terraform plan -no-color 

    - name: Terraform Apply
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: terraform apply -auto-approve

    - name: Replace Image Name in Deployment
      uses: cschleiden/replace-tokens@v1
      with:
        files: '["kubernetes/*.yaml"]'
        tokenPrefix: __ # optional, default is #{
        tokenSuffix: __ # optional, default is }#
      env:
        DOCKER_REPOSITORY: ${{ env.DOCKER_REPOSITORY }}
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}

    # Set the target AKS cluster.
    - uses: Azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.AKS_NAME }}
        resource-group: ${{ env.AKS_RESOURCE_GROUP }}
        
    - uses: Azure/k8s-deploy@v1
      with:
        manifests: |
          kubernetes/mssql-pv.azure.yaml
          kubernetes/mssql-configmap.yaml
          kubernetes/mssql-secret.yaml
          kubernetes/mssql-deployment.yaml
          kubernetes/mvc-deployment.azure.yaml
    
    - name: Run Kube-Bench to check cluster config
      continue-on-error: true
      run: |
        kubectl apply -f https://raw.githubusercontent.com/aquasecurity/kube-bench/main/job-aks.yaml
        sleep 30s
        kubectl logs job.batch/kube-bench
        kubectl delete job.batch/kube-bench
