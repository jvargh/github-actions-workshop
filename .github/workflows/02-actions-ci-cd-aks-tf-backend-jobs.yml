name: 02-actions-ci-cd-aks-tf-backend-jobs

on:
  push:
    branches: [main]
    paths:
      - '.github/workflows/02-actions-ci-cd-aks-tf-backend-jobs.yml'
      - 'aks_infra/**'
      - 'aks_kubernetes/**'
      - 'aks_MvcApp/**'
  pull_request:
    branches: ['*']
    paths:
      - '.github/workflows/02-actions-ci-cd-aks-tf-backend-jobs.yml'
      - 'aks_infra/**'
      - 'aks_kubernetes/**'
      - 'aks_MvcApp/**'
  workflow_dispatch:

env:
  LOCATION: eastus
  INFRA_RESOURCE_GROUP: tfstate-resourcegroup
  TF_STATE_STORAGE_ACCOUNT_NAME: tfstatestorage103
  TF_STATE_CONTAINER_NAME: tfstate
  TF_STATE_FILE_NAME: terraform.tfstate

  TF_STATE_ACCESS_KEY: "" # will be set later
    
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID:  ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  AKS_RESOURCE_GROUP: aks-203-rg
  AKS_NAME: aks-203
  ACR_NAME: acrforaks203
  SQL_INSTANCE_NAME: sqlforaks203
  DB_ADMIN_LOGIN: sadmin
  DB_ADMIN_PASSWORD: "@Aa123456"
  STORAGE_NAME: storageforaks203

  DOCKER_REPOSITORY: acrforaks203.azurecr.io
  IMAGE_NAME: webapp
  IMAGE_TAG: 30
#   IMAGE_TAG: ${{ github.run_number }}
  WORKING_DIRECTORY: aks_infra
  K8S_DIRECTORY: aks_kubernetes

jobs:
  prepare-terraform:
    name: Prepare Terraform Backend
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags.
      # Add other steps for preparing terraform

  apply-terraform:
    name: Apply Terraform Backend
    runs-on: ubuntu-latest
    needs: prepare-terraform
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # Add steps for applying terraform

  build-scan-container:
    name: Build & Scan Docker container
    runs-on: ubuntu-latest
    needs: apply-terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # Add steps for building and pushing docker container

  push-container:
    name: Build & Push Docker container
    runs-on: ubuntu-latest
    needs: [build-scan-container]

    steps:
    - name: Login to Azure with Service Principal
      uses: Azure/login@v1.4.3
      with:
        # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to ACR
      run: |
        ACR_PASSWORD=$(az acr credential show -n ${{ env.ACR_NAME }} -o tsv --query passwords[0].value)
        docker login ${{ env.DOCKER_REPOSITORY }} --username ${{ env.ACR_NAME }} --password $ACR_PASSWORD
        
    - name: Push Image to ACR
      run: |
        docker push ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
     


  deploy-app-aks:
    name: Deploy app into Kubernetes
    runs-on: ubuntu-latest
    needs: [push-container, apply-terraform]

    steps:
    - uses: actions/checkout@v2

    - name: Replace Image Repository, Name and Tag in YAML deployment
      uses: datamonsters/replace-action@v2
      with:
        files: ${{ env.K8S_DIRECTORY }}/mvc-deployment.azure.yaml
        replacements: '__DOCKER_REPOSITORY__=${{ env.DOCKER_REPOSITORY }},__IMAGE_NAME__=${{ env.IMAGE_NAME }},__IMAGE_TAG__=${{ env.IMAGE_TAG }}'
        
    - name: Login to Azure
      uses: azure/login@v1.4.3
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Connect to AKS
      uses: Azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.AKS_NAME }}
        resource-group: ${{ env.AKS_RESOURCE_GROUP }}

    - name: Deploy YAML manifest into AKS
      uses: Azure/k8s-deploy@v1
      with:
        manifests: |
          ${{ env.K8S_DIRECTORY }}/mssql-pv.azure.yaml
          ${{ env.K8S_DIRECTORY }}/mssql-secret.yaml
          ${{ env.K8S_DIRECTORY }}/mssql-deployment.yaml
          ${{ env.K8S_DIRECTORY }}/mvc-deployment.azure.yaml
          ${{ env.K8S_DIRECTORY }}/mssql-configmap.yaml

    - name: Run Kube-Bench to check cluster config
      continue-on-error: true
      run: |
        kubectl apply -f https://raw.githubusercontent.com/aquasecurity/kube-bench/main/job-aks.yaml
        sleep 30s
        kubectl logs job.batch/kube-bench
        kubectl delete job.batch/kube-bench

    # - name: Run Kube Advisor to check for Resource Limits
    #   continue-on-error: true
    #   run:
    #     kubectl run --rm -i -t kubeadvisor --image=mcr.microsoft.com/aks/kubeadvisor --restart=Never
        
    # - name: Deploy Kured into AKS using Helm
    #   run: |
    #     helm repo add kured https://weaveworks.github.io/kured
    #     helm upgrade kured kured/kured --namespace kured --install --create-namespace \
    #       --set nodeSelector."beta\.kubernetes\.io/os"=linux \
    #       --set configuration.startTime=9am \
    #       --set configuration.endTime=5pm \
    #       --set configuration.timeZone="America/Los_Angeles"
    #       # --set configuration.rebootDays="[mo,tu,we,th,fr]"
          
    # - name: Deploy Prometheus & Grafana into AKS using Helm
    #   run: |
    #     helm repo add "stable" https://charts.helm.sh/stable
    #     helm upgrade --install prometheus stable/prometheus --set server.service.type=LoadBalancer
    #     helm upgrade --install grafana stable/grafana --set service.type=LoadBalancer
        
    # - name: Deploy EFK into AKS using Helm
    #   run: |
    #     helm upgrade --install elasticsearch stable/elasticsearch 
    #     kubectl apply -f logging-efk/fluentd-daemonset-elasticsearch.yaml
    #     helm upgrade kibana stable/kibana --install -f logging-efk/kibana-values.yaml
