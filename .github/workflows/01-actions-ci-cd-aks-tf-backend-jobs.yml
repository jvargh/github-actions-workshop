name: 01-actions-ci-cd-aks-tf-backend-jobs
on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/01-actions-ci-cd-aks-tf-backend-jobs.yml
      - aks_infra/**
      - aks_kubernetes/**
      - aks_MvcApp/**
  pull_request:
    types:
      - opened
    branches:
      - '*'  # This allows pull requests from any branch to trigger the workflow
    paths:
      - .github/workflows/01-actions-ci-cd-aks-tf-backend-jobs.yml
      - aks_infra/**
      - aks_kubernetes/**
      - aks_MvcApp/**
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  LOCATION: eastus
  INFRA_RESOURCE_GROUP: tfstate-resourcegroup
  TF_STATE_STORAGE_ACCOUNT_NAME: tfstatestorage103
  TF_STATE_CONTAINER_NAME: tfstate
  TF_STATE_FILE_NAME: terraform.tfstate

  TF_STATE_ACCESS_KEY: "" # will be set later
    
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID:  ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  AKS_RESOURCE_GROUP: aks-103-rg
  AKS_NAME: aks-103
  ACR_NAME: acrforaks103
  SQL_INSTANCE_NAME: sqlforaks103
  DB_ADMIN_LOGIN: sadmin
  DB_ADMIN_PASSWORD: "@Aa123456"
  STORAGE_NAME: storageforaks103

  DOCKER_REPOSITORY: acrforaks103.azurecr.io
  IMAGE_NAME: webapp
  IMAGE_TAG: 30
#   IMAGE_TAG: ${{ github.run_number }}
  WORKING_DIRECTORY: aks_infra
  K8S_DIRECTORY: aks_kubernetes

jobs:
  create-terraform-infra:
    name: Create Terraform Backend
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Login to Azure with Service Principal
      uses: Azure/login@v1.6.0
      with:
        # Paste output of below cmd as value of secret variable: AZURE_CREDENTIALS
        # az ad sp create-for-rbac --name "spn-githubactions" --role Owner --scope /subscriptions/<sub-id> --sdk-auth
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      
    - name: Create Terraform backend state storage
      uses: Azure/cli@v1.0.6
      with:
        # Azure CLI version to be used to execute the script. If not provided, latest version is used
        # azcliversion: 2.34.1 # optional, default is agentazcliversion
        inlineScript: |
          az version

          # Create the resource group
          az group create -n $INFRA_RESOURCE_GROUP -l $LOCATION          
          
          # Create the storage account
          az storage account create -g $INFRA_RESOURCE_GROUP -l $LOCATION \
            --name $TF_STATE_STORAGE_ACCOUNT_NAME \
            --sku Standard_LRS \
            --encryption-services blob
          
          # Retrieve the storage account key
          ACCOUNT_KEY=$(az storage account keys list --resource-group $INFRA_RESOURCE_GROUP --account-name $TF_STATE_STORAGE_ACCOUNT_NAME --query [0].value -o tsv)         
          TF_STATE_ACCESS_KEY=$ACCOUNT_KEY

          # Create a storage container (for the Terraform State)
          az storage container create --name $TF_STATE_CONTAINER_NAME --account-name $TF_STATE_STORAGE_ACCOUNT_NAME

          # Generate backend.tf file
          cd $WORKING_DIRECTORY
          cat <<EOT > backend.tf
          terraform {
            backend "azurerm" {
              resource_group_name   = "$INFRA_RESOURCE_GROUP"
              storage_account_name  = "$TF_STATE_STORAGE_ACCOUNT_NAME"
              container_name        = "$TF_STATE_CONTAINER_NAME"
              key                   = "$TF_STATE_FILE_NAME"
            }
          }
          EOT
          
          cat backend.tf     

          echo "TF_STATE_ACCESS_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV
    
    - name: Replace Variables in terraform.tfvars
      uses: datamonsters/replace-action@v2
      with:
        files: ${{ env.WORKING_DIRECTORY }}/terraform.tfvars
        replacements: '__AKS_RESOURCE_GROUP__=${{ env.AKS_RESOURCE_GROUP }},__AKS_NAME__=${{ env.AKS_NAME }},__ACR_NAME__=${{ env.ACR_NAME }},__SQL_INSTANCE_NAME__=${{ env.SQL_INSTANCE_NAME }},__DB_ADMIN_LOGIN__=${{ env.DB_ADMIN_LOGIN }},__DB_ADMIN_PASSWORD__=${{ env.DB_ADMIN_PASSWORD }},__STORAGE_NAME__=${{ env.STORAGE_NAME }}'
 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.6.6
    
    - name: Terraform fmt
      id: fmt
      run: terraform fmt
      working-directory: ${{ env.WORKING_DIRECTORY }}
      continue-on-error: true
    
    - name: Terraform Init (Azure Backend)
      run: terraform init
            -backend-config="storage_account_name=$TF_STATE_STORAGE_ACCOUNT_NAME"
            -backend-config="container_name=$TF_STATE_CONTAINER_NAME"
            -backend-config="access_key=$TF_STATE_ACCESS_KEY"
            -backend-config="key=$TF_STATE_FILE_NAME"
      working-directory: ${{ env.WORKING_DIRECTORY }}/
    
    - name: Terraform Validate
      run: terraform validate -no-color
      working-directory: ${{ env.WORKING_DIRECTORY }}
    
    - name: Terraform Plan
      run: terraform plan -out out.plan -var-file="terraform.tfvars"
      working-directory: ${{ env.WORKING_DIRECTORY }}
      continue-on-error: true
      
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve out.plan
      working-directory: ${{ env.WORKING_DIRECTORY }}




  build-push-container:
    name: Build & Push Docker container
    runs-on: ubuntu-latest
    needs: [create-terraform-infra]
        
    steps:
    - uses: actions/checkout@v2
 
    - name: Build Docker Image
      run:
        docker build ./aks_MvcApp/ --file ./aks_MvcApp/Dockerfile --tag ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    - name: Scan Docker Image using Trivy and Dockle
      uses: Azure/container-scan@v0
      continue-on-error: true
      with:
        image-name: ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
              
    - name: Scan Docker Image using Trivy
      continue-on-error: true
      run:
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/Library/Caches:/root/.cache/ aquasec/trivy --exit-code 0 --severity MEDIUM,HIGH,CRITICAL --ignore-unfixed $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG

    - name: Login to Azure with Service Principal
      uses: Azure/login@v1.4.3
      with:
        # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to ACR
      run: |
        ACR_PASSWORD=$(az acr credential show -n ${{ env.ACR_NAME }} -o tsv --query passwords[0].value)
        docker login ${{ env.DOCKER_REPOSITORY }} --username ${{ env.ACR_NAME }} --password $ACR_PASSWORD
        
    - name: Push Image to ACR
      run: |
        docker push ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
     


  deploy-app-aks:
    name: Deploy app into Kubernetes
    runs-on: ubuntu-latest
    needs: [build-push-container, create-terraform-infra]

    steps:
    - uses: actions/checkout@v2

    - name: Replace Image Repository, Name and Tag in YAML deployment
      uses: datamonsters/replace-action@v2
      with:
        files: ${{ env.K8S_DIRECTORY }}/mvc-deployment.azure.yaml
        replacements: '__DOCKER_REPOSITORY__=${{ env.DOCKER_REPOSITORY }},__IMAGE_NAME__=${{ env.IMAGE_NAME }},__IMAGE_TAG__=${{ env.IMAGE_TAG }}'
        
    - name: Login to Azure
      uses: azure/login@v1.4.3
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Connect to AKS
      uses: Azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.AKS_NAME }}
        resource-group: ${{ env.AKS_RESOURCE_GROUP }}

    - name: Deploy YAML manifest into AKS
      uses: Azure/k8s-deploy@v1
      with:
        manifests: |
          ${{ env.K8S_DIRECTORY }}/mssql-pv.azure.yaml
          ${{ env.K8S_DIRECTORY }}/mssql-secret.yaml
          ${{ env.K8S_DIRECTORY }}/mssql-deployment.yaml
          ${{ env.K8S_DIRECTORY }}/mvc-deployment.azure.yaml
          ${{ env.K8S_DIRECTORY }}/mssql-configmap.yaml

    - name: Run Kube-Bench to check cluster config
      continue-on-error: true
      run: |
        kubectl apply -f https://raw.githubusercontent.com/aquasecurity/kube-bench/main/job-aks.yaml
        sleep 30s
        kubectl logs job.batch/kube-bench
        kubectl delete job.batch/kube-bench

    # - name: Run Kube Advisor to check for Resource Limits
    #   continue-on-error: true
    #   run:
    #     kubectl run --rm -i -t kubeadvisor --image=mcr.microsoft.com/aks/kubeadvisor --restart=Never
        
    # - name: Deploy Kured into AKS using Helm
    #   run: |
    #     helm repo add kured https://weaveworks.github.io/kured
    #     helm upgrade kured kured/kured --namespace kured --install --create-namespace \
    #       --set nodeSelector."beta\.kubernetes\.io/os"=linux \
    #       --set configuration.startTime=9am \
    #       --set configuration.endTime=5pm \
    #       --set configuration.timeZone="America/Los_Angeles"
    #       # --set configuration.rebootDays="[mo,tu,we,th,fr]"
          
    # - name: Deploy Prometheus & Grafana into AKS using Helm
    #   run: |
    #     helm repo add "stable" https://charts.helm.sh/stable
    #     helm upgrade --install prometheus stable/prometheus --set server.service.type=LoadBalancer
    #     helm upgrade --install grafana stable/grafana --set service.type=LoadBalancer
        
    # - name: Deploy EFK into AKS using Helm
    #   run: |
    #     helm upgrade --install elasticsearch stable/elasticsearch 
    #     kubectl apply -f logging-efk/fluentd-daemonset-elasticsearch.yaml
    #     helm upgrade kibana stable/kibana --install -f logging-efk/kibana-values.yaml
